---
name: Auto Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

jobs:
  auto-release:
    name: Auto Tag and Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get latest tag
        id: latest_tag
        run: |
          # Get the latest tag, check if any tags exist
          LATEST_TAG=$(git tag --sort=-version:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "no_prior_tags=true" >> $GITHUB_OUTPUT
            echo "latest_tag=" >> $GITHUB_OUTPUT
            echo "No prior tags found - this will be the first release"
          else
            echo "no_prior_tags=false" >> $GITHUB_OUTPUT
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
            echo "Latest tag: $LATEST_TAG"
          fi

      - name: Determine version bump
        id: version_bump
        run: |
          # Check if this is the first release
          if [ "${{ steps.latest_tag.outputs.no_prior_tags }}" = "true" ]; then
            echo "bump_type=initial" >> $GITHUB_OUTPUT
            echo "Version bump type: initial (first release)"
            exit 0
          fi

          # Check if this is a manual workflow dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            # Auto-determine from commit messages
            COMMITS=$(git log ${{ steps.latest_tag.outputs.latest_tag }}..HEAD \
              --pretty=format:"%s")

            if echo "$COMMITS" | grep -qi "BREAKING CHANGE\|!:" || \
               echo "$COMMITS" | grep -qE "^[a-zA-Z]+(\(.+\))?!:"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -qiE "^feat(\(.+\))?:" || \
                 echo "$COMMITS" | grep -qi "^feature"; then
              BUMP_TYPE="minor"
            elif echo "$COMMITS" | \
                 grep -qiE "^(fix|patch|chore|docs|style|refactor|test|build|ci)(\(.+\))?:" || \
                 [ -n "$COMMITS" ]; then
              BUMP_TYPE="patch"
            else
              echo "No version-worthy changes found, skipping release"
              exit 0
            fi
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Version bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"

          # Handle first release
          if [ "$BUMP_TYPE" = "initial" ]; then
            NEW_VERSION="v1.0.0"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "New version: $NEW_VERSION (initial release)"
            exit 0
          fi

          # Handle subsequent releases
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"

          # Remove 'v' prefix for calculation
          VERSION=${LATEST_TAG#v}

          # Split version into components
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Bump version based on type
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Check if tag already exists
        id: tag_exists
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          if git rev-parse --verify "refs/tags/$NEW_VERSION" >/dev/null 2>&1; then
            echo "Tag $NEW_VERSION already exists, skipping release"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests before release
        if: steps.tag_exists.outputs.exists == 'false'
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      - name: Check coverage threshold
        if: steps.tag_exists.outputs.exists == 'false'
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | \
            grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 80.0" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below required 80%"
            exit 1
          fi

      - name: Create tag
        if: steps.tag_exists.outputs.exists == 'false'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create tag
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"

          echo "Created tag: $NEW_VERSION"

      - name: Build cross-platform binaries
        if: steps.tag_exists.outputs.exists == 'false'
        run: |
          # Create release directory
          mkdir -p release

          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -w" -o release/pcp-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build \
            -ldflags="-s -w" -o release/pcp-linux-arm64 .
          GOOS=darwin GOARCH=amd64 go build \
            -ldflags="-s -w" -o release/pcp-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build \
            -ldflags="-s -w" -o release/pcp-darwin-arm64 .
          GOOS=windows GOARCH=amd64 go build \
            -ldflags="-s -w" -o release/pcp-windows-amd64.exe .
          GOOS=windows GOARCH=arm64 go build \
            -ldflags="-s -w" -o release/pcp-windows-arm64.exe .

          # Copy install scripts to release directory
          cp install.sh release/
          cp install.ps1 release/

          # Create checksums (include install scripts)
          cd release
          sha256sum pcp-* > checksums.txt
          cd ..

      - name: Generate release notes
        if: steps.tag_exists.outputs.exists == 'false'
        id: release_notes
        run: |
          # Get the previous tag for changelog
          if [ "${{ steps.latest_tag.outputs.no_prior_tags }}" = "true" ]; then
            echo "## What's New" > release_notes.md
            echo "Initial release of PCP (Prompt Composition Processor)" \
              >> release_notes.md
          else
            echo "## What's Changed" > release_notes.md
            git log --pretty=format:"- %s (%h)" \
              ${{ steps.latest_tag.outputs.latest_tag }}..HEAD >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Quick Install (Recommended)" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Linux/macOS:**" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "curl -fsSL https://github.com/riazarbi/pcp/releases/latest/download/install.sh | sh" \
            >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Windows PowerShell:**" >> release_notes.md
          echo "\`\`\`powershell" >> release_notes.md
          echo "iwr https://github.com/riazarbi/pcp/releases/latest/download/install.ps1 | iex" \
            >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Go Install" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "go install github.com/riazarbi/pcp@${{ steps.new_version.outputs.new_version }}" \
            >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Manual Download" >> release_notes.md
          echo "Download the appropriate binary for your platform from the assets below." \
            >> release_notes.md
          echo "" >> release_notes.md
          echo "## Supported Platforms" >> release_notes.md
          echo "- Linux (amd64, arm64)" >> release_notes.md
          echo "- macOS (amd64, arm64)" >> release_notes.md
          echo "- Windows (amd64, arm64)" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Verification" >> release_notes.md
          echo "All binaries are provided with SHA256 checksums in \`checksums.txt\`" \
            >> release_notes.md
          echo "The install scripts automatically verify checksums when available." \
            >> release_notes.md

          # Set output for use in release step
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.tag_exists.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          name: Release ${{ steps.new_version.outputs.new_version }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: |
            release/pcp-*
            release/checksums.txt
            release/install.sh
            release/install.ps1
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push tag
        if: steps.tag_exists.outputs.exists == 'false'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          git push origin "$NEW_VERSION"
          echo "Pushed tag: $NEW_VERSION"

      - name: Output result
        run: |
          if [ "${{ steps.tag_exists.outputs.exists }}" = "true" ]; then
            echo "Tag already exists, no action taken"
          else
            echo "Successfully created release: ${{ steps.new_version.outputs.new_version }}"
          fi
