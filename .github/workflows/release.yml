---
name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Test before release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Test
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out

      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | \
            grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 80.0" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below required 80%"
            exit 1
          fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build cross-platform binaries
        run: |
          # Create release directory
          mkdir -p release

          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build \
            -ldflags="-s -w" -o release/pcp-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build \
            -ldflags="-s -w" -o release/pcp-linux-arm64 .
          GOOS=darwin GOARCH=amd64 go build \
            -ldflags="-s -w" -o release/pcp-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build \
            -ldflags="-s -w" -o release/pcp-darwin-arm64 .
          GOOS=windows GOARCH=amd64 go build \
            -ldflags="-s -w" -o release/pcp-windows-amd64.exe .
          GOOS=windows GOARCH=arm64 go build \
            -ldflags="-s -w" -o release/pcp-windows-arm64.exe .

          # Create checksums
          cd release
          sha256sum * > checksums.txt
          cd ..

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the previous tag for changelog
          PREVIOUS_TAG=$(git tag --sort=-version:refname | \
            head -n 2 | tail -n 1)

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "## What's New" > release_notes.md
            echo "Initial release of PCP (Prompt Composition Processor)" \
              >> release_notes.md
          else
            echo "## What's Changed" > release_notes.md
            git log --pretty=format:"- %s (%h)" \
              $PREVIOUS_TAG..${{ steps.tag.outputs.tag }} >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Go Install" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "go install github.com/riazarbi/pcp@${{ steps.tag.outputs.tag }}" \
            >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Download Binary" >> release_notes.md
          echo "Download the appropriate binary for your platform from the assets below." \
            >> release_notes.md
          echo "" >> release_notes.md
          echo "## Supported Platforms" >> release_notes.md
          echo "- Linux (amd64, arm64)" >> release_notes.md
          echo "- macOS (amd64, arm64)" >> release_notes.md
          echo "- Windows (amd64, arm64)" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Verification" >> release_notes.md
          echo "All binaries are provided with SHA256 checksums in \`checksums.txt\`" \
            >> release_notes.md

          # Set output for use in release step
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: |
            release/pcp-*
            release/checksums.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
